{"version":3,"sources":["components/tiles.jsx","components/modal.jsx","App.js","serviceWorker.js","index.js"],"names":["imgStyle","width","maxWidth","border","hover","Tiles","props","react_default","a","createElement","className","src","image","alt","style","onClick","Modal","maxClicks","tiles","length","App","state","clicked","clickCnt","wins","losses","id","_this","setState","includes","push","sort","b","Math","random","console","log","_this2","this","Fragment","map","tile","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m1BAEMA,EAAW,CACfC,MAAO,OACPC,SAAU,QACVC,OAAQ,wBACRC,MAAO,oBAqBMC,EAZD,SAAAC,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OACAE,IAAKL,EAAMM,MACXC,IAAKP,EAAMO,IACXC,MAAOd,EACPe,QAAS,kBAAMT,EAAMS,eCFZC,WCfTC,SAAYC,EAAMC,QA4ETC,6MA1EbC,MAAQ,CACNC,QAAS,GACTJ,MAAOA,EACPK,SAAU,EACVC,KAAM,EACNC,OAAQ,KAIVV,QAAU,SAAAW,GACRC,EAAKC,SAAS,CAAEL,SAAUI,EAAKN,MAAME,SAAU,IAE3CI,EAAKN,MAAMC,QAAQO,SAASH,GAC9BC,EAAKC,SAAS,CAAEH,OAAQE,EAAKN,MAAMI,OAAS,EAAGH,QAAS,MAGxDK,EAAKN,MAAMC,QAAQQ,KAAKJ,GAEpBC,EAAKN,MAAMC,QAAQH,SAAWF,GAEhCU,EAAKC,SAAS,CAAEJ,KAAMG,EAAKN,MAAMG,KAAO,EAAIF,QAAS,MAKzDK,EAAKN,MAAMH,MAAMa,KAAK,SAACvB,EAAGwB,GAAJ,MAAU,GAAMC,KAAKC,6IAS3CC,QAAQC,IAAI,4DAML,IAAAC,EAAAC,KAEP,OACG/B,EAAAC,EAAAC,cAACF,EAAAC,EAAM+B,SAAP,KACChC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,aAAK6B,KAAKjB,MAAMC,QAAQH,OAAxB,OAAoCF,IAEtCV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAASH,EAAAC,EAAAC,cAAA,0DACtBF,EAAAC,EAAAC,cAAA,gDAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,mBAAW6B,KAAKjB,MAAMG,MACtBjB,EAAAC,EAAAC,cAAA,qBAAa6B,KAAKjB,MAAMI,UAG5BlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZ4B,KAAKjB,MAAMH,MAAMsB,IAAI,SAAAC,GAAI,OAC1BlC,EAAAC,EAAAC,cAACS,EAAD,CACEN,MAAO6B,EAAK7B,MACZC,IAAK4B,EAAK5B,IACVE,QAAS,kBAAMsB,EAAKtB,QAAQ0B,EAAKf,KACjCgB,IAAKD,EAAKf,iBAjENiB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.067a655c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst imgStyle = {\r\n  width: \"100%\",\r\n  maxWidth: \"175px\",\r\n  border: \"solid 2px transparent\",\r\n  hover: \"borderColor: red\"\r\n}\r\n  // width: \"175px\",\r\n  // height: \"260px\",\r\n  // maxWidth: 100%,\r\n  // height: \"auto\",\r\n  // padding: \"3px\"\r\n\r\n\r\nconst Tiles = props => {   \r\n  return  (\r\n    <div className=\"column\">\r\n      <img \r\n      src={props.image}\r\n      alt={props.alt}\r\n      style={imgStyle}\r\n      onClick={() => props.onClick()}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Tiles;\r\n","import React from 'react';\r\nfunction Modal() {\r\n  return (\r\n    <div class=\"modal\" tabindex=\"-1\" role=\"dialog\">\r\n      <div class=\"modal-dialog\" role=\"document\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Modal title</h5>\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n              <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <p>Modal body text goes here.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Modal;\r\n","import React, { Component } from 'react';\r\nimport Tiles from './components/tiles'\r\nimport Modal from './components/modal'\r\nimport tiles from './tiles.json'\r\nimport './App.css';\r\nconst maxClicks = tiles.length\r\nclass App extends Component {\r\n  state = {\r\n    clicked: [],\r\n    tiles: tiles,\r\n    clickCnt: 0,\r\n    wins: 0,\r\n    losses: 0\r\n  };\r\n  \r\n\r\n  onClick = id => { \r\n    this.setState({ clickCnt: this.state.clickCnt +1 });\r\n    // console.log('Clicks after: ' + this.state.clickCnt)\r\n    if (this.state.clicked.includes(id)) {\r\n      this.setState({ losses: this.state.losses + 1, clicked: [] });\r\n      // console.log('duplicate');\r\n    } else {\r\n      this.state.clicked.push(id);\r\n      // console.log(`unique ${this.state.clicked.length}`);\r\n      if (this.state.clicked.length === maxClicks ) {\r\n        // this.setState({ wins: this.state.wins + 1, clickCnt: 0, clicked: [] })\r\n        this.setState({ wins: this.state.wins + 1,  clicked: [] })\r\n        // <Modal > modal('show') </Modal>\r\n      \r\n      }\r\n    }\r\n    this.state.tiles.sort((a, b) => 0.5 - Math.random());\r\n  }\r\n \r\n  componentDidUpdate() {\r\n    // if (this.state.clickCnt === this.state.tiles.length) {\r\n    //   this.setState({ wins: this.state.wins +1, clickCnts: 0, clicked: []})\r\n    // }\r\n  }   \r\n  componentDidMount() {\r\n    console.log(\"fired componentDidMount\");\r\n    //*  place for an ajax call to get data from the server\r\n    //* e.g. this.SetState({ movies })\r\n  }\r\n\r\n\r\n  render() {\r\n    // console.log(\"app - rendered\");\r\n    return (\r\n       <React.Fragment>\r\n        <header>\r\n          <div className=\"left\">\r\n            <p> Unique clicks:</p>\r\n            <p> {this.state.clicked.length} of {maxClicks}</p>\r\n          </div>\r\n          <div className=\"center\"><h1>Recognizing Emotions from Facial Expressions</h1>\r\n            <p> Click each image only once to Win</p>\r\n          </div>\r\n          <div className=\"right\">\r\n            <p> Wins: {this.state.wins}</p>\r\n            <p> Losses: {this.state.losses}</p>\r\n          </div>\r\n        </header>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            {this.state.tiles.map(tile => (\r\n            <Tiles  \r\n              image={tile.image}\r\n              alt={tile.alt}\r\n              onClick={() => this.onClick(tile.id)}\r\n              key={tile.id}\r\n            />\r\n            ))}\r\n        </div>\r\n      </div>\r\n     </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}